########################################################
# nimarafati@gmail.com	                               #
# Please cite the script by referencing to github      #
# repository 					       #
########################################################
import argparse
from argparse import RawTextHelpFormatter
import re 
parser = argparse.ArgumentParser(description = 'This script generates mpileup files by normalizing number of reads supprting reference and alternate allele. To run this script you need to extract AD and GQ from filtered vcf file (All variants should be PASS). To create such a file you need to run the GATK following command.\ngatk VariantsToTable -V Raw_Call-INDEL.vcf -F CHROM -F POS -F QUAL   -O Raw_Call-INDEL_stats.txt -GF AD -GF GQ \nThe header of the file looks like this:\nCHROM   POS     TYPE    30C_T10_R1.AD   30C_T10_R1.GQ ', formatter_class = RawTextHelpFormatter)
parser.add_argument('-input', '-i', help = 'A table file generated by gatk VariantsToTable')
parser.add_argument('-normalised_depth', '-n', help = 'A value to normalise thie allele count depth (default : 200)', type =int)
parser.add_argument('-genotype_quality', '-GQ', help = 'If provided variants in samples below this threshold will be printed empty.', type = int)
parser.add_argument('-min_depth', '-min', help = 'If provided variants in samples below this threshold will be printed empty (default : 5)', type = int)
parser.add_argument('-only_SNP', '-SNP', help = 'Process SNP; exclude INDELs. In this version only SNPs are processed')
parser.add_argument('-max_depth', '-max', help = 'Variants with depth higher than this value will not be normalised (default 1000)', type = int) 

args = parser.parse_args()

def norm_depth(ad_list, sum_depth, target_depth):
	norm_rc_list = [0, 0]
	norm_rc_list[0] = int(ad_list[0] * target_depth / sum_depth)
	norm_rc_list[1] = int(ad_list[1] * target_depth / sum_depth)
	while sum(norm_rc_list) < target_depth:
		norm_rc_list[0] = norm_rc_list[0] + 1
	return norm_rc_list

def generate_pileup(ad_list, ref_allele, alt_allele):
	bases = ref_allele * ad_list[0] + alt_allele * ad_list[1] 
	qualities = 'F' * sum(ad_list)
	return [bases, qualities]

# Print error that an input file is missing
if args.input is None:
	print('\nERROR:Please provide an input file\n')
	parser.print_help()
	exit()

# Set default values if were not provided
if args.normalised_depth is None:
	args.normalised_depth = 200
if args.min_depth is None:
	args.min_depth = 5
if args.max_depth is None:
	args.max_depth = 1000

# creat eempty directories
AD_dict = {}
GQ_dict = {}
cntr = 1
input_file = open(args.input, 'r')
for line in input_file:
	line = line.strip()
	line_list = line.split()
	# save variant coordinates and type
	chrome = line_list[0]
	pos = line_list[1]
	var_type = line_list[2]
	# Save samples in dictionary (AD and GQ)
	if cntr == 1:
		for i in range(3,len(line_list)):
#			print('i: ' + str(i) + '\tline_list_length: ' + str(len(line_list)))
	#		print(str(i)+ ': ', line_list[i])
			# Extract samples ID and save the column index
			sample_name_list = line_list[i].split('.')
			if(len(sample_name_list) > 1):
				if sample_name_list[1] == 'AD':
					AD_dict[sample_name_list[0]] = i
				elif sample_name_list[1] == 'GQ':
					GQ_dict[sample_name_list[0]] = i
			# Save REF/ALT column
			else:
				if line_list[i] == 'REF':
					ref_col_index = i
				if line_list[i] == 'ALT':
					alt_col_index = i
	else:
		# Process SNPs only
		if var_type == 'SNP':
#			print(line)
			# Save reference and alternative allele
			reference_allele = line_list[ref_col_index]
			alternative_allele = line_list[alt_col_index]
			# process if GQ was not used
			if args.genotype_quality is None:
				#Loop throgh alleleic depth (,) and normalise the depth
				for key in AD_dict:
					AD_list = line_list[AD_dict[key]].split(',')
					AD_list = [int(j) for j in AD_list]
					sum_depth = sum(AD_list)
					if sum_depth >= args.min_depth and sum_depth <= args.max_depth:
#						#print(key + ': '+ str(pos))
						AD_normalised_list = norm_depth(AD_list, sum_depth, args.normalised_depth) #[round(AD_list[0]/sum_depth), round(AD_list[1]/sum_depth)]
						bases, qualities = generate_pileup(AD_normalised_list, reference_allele, alternative_allele)
						file_name=key + ".pileup"
#						print(str(i) + ':' + file_name + '=' + chrome + ':' + str(pos))
						# overwrite the file by first line
						if cntr == 2:
							f = open(file_name, 'w')
						else:
							f = open(file_name, 'a')
						f.write(chrome + '\t' + str(pos) + '\tN\t' + str(args.normalised_depth) + '\t' + bases + '\t'  + qualities + '\n')
						f.close()
#						input()
#	print(cntr)
#	input()
#str(AD_dict[key]) + '=' + str(sum_depth)  + '\n' + str(AD_list), str(AD_normalised_list))
	
	cntr = cntr + 1



	#
	#print(line + '\t AD:' + str(AD_dict[sample_name_list[0]]) + '\t GQ:' + str(GQ_dict[sample_name_list[0]]))
#		print('input file: ' + args.input + '\nnormalise depth to: ' + str(args.normalised_depth) + '\nmin_depth: ' + str(args.min_depth) + '\nline_list: ' + line_list[i]) 



